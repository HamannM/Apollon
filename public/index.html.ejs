<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Apollon</title>

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
  </head>
  <body>
    <header class="navbar">
      <a class="navbar-brand logo float-left">
        <img class="logo-img" src="images/logo.png" />
        <span>&nbsp;&nbsp;&nbsp;</span>
        <span class="navbar-title">Apollon</span>&nbsp;&nbsp;&nbsp;<span class="navbar-version">
          <%=htmlWebpackPlugin.options.version%>
        </span>
      </a>
    </header>
    <div class="container">
      <main id="apollon"></main>
      <aside class="sidebar">
        <section>
          <h3 class="header">Task</h3>
          <div class="dropdown">
            <select name="task" id="taskDropDown">
              <option value="PLANARITY">Planarity</option>
              <option value="CONNECTIVITY">Connectivity</option>
              <option value="CUT_VERTEX">Cut Vertex</option>
            </select>
            <div id="taskDescription">
            </div>
          </div>
        </section>
<!--        <section>
          <h3 class="header">Export</h3>
          <div class="switch">
            <button onclick="apollon.draw()">Export</button>
            &lt;!&ndash;<button onclick="apollon.draw('include')">Include</button>
            <button onclick="apollon.draw('exclude')">Exclude</button> &ndash;&gt;
          </div>
        </section>-->
        <section>
          <h3 class="header">Assessment</h3>
          <div class="switch">
            <button onclick="submitSolution()">Submit Solution</button>
          </div>
          <div></div>
        </section>
        <section id="assessmentFeedbackSection">
          <h3 class="header">Feedback</h3>
          <div id="assessmentFeedbackText">
          </div>
          <div></div>
        </section>
      </aside>
    </div>
  </body>

  <script>
    // for the sake of the prototype, this mess of a code is gonna be in the template
    let taskDescriptionPlanarity = "Assesses whether the given graph is planar.";
    let taskDescriptionConnectivity = "Assesses whether the given graph is connected.";
    let taskDescriptionCutVertex = "Assesses whether the selected vertex is a cut vertex.";

    let taskDescriptionMap = new Map([
      ["PLANARITY", taskDescriptionPlanarity],
      ["CONNECTIVITY", taskDescriptionConnectivity],
      ["CUT_VERTEX", taskDescriptionCutVertex],
    ]);


    let taskDescriptionNode = document.getElementById("taskDescription");

    let taskDropDown = document.getElementById("taskDropDown");
    taskDropDown.selectedIndex = -1;
    taskDropDown.addEventListener("change", e => {
      taskDescriptionNode.innerHTML = taskDescriptionMap.get(taskDropDown.value);
    });

    function submitSolution() {
      let payload = apollon.getModelAsJson();
      payload.taskType = taskDropDown.value

      let xhr = new XMLHttpRequest();
      xhr.open("POST", "http://localhost:8889/graphAssessment", true);
      xhr.onreadystatechange = function() {
        if (xhr.readyState == 4 && xhr.status == 200) {
          console.log(xhr.responseText)
          console.log()
        }
      }
      xhr.send(JSON.stringify(payload));

/*      fetch('/readme.txt')
              .then(response => response.text())
              .then(data => console.log(data))*/;
    }


  </script>
</html>
